<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<http:request-config name="HTTP_Geoserver_Request" host="${geoserver.host}" port="${geoserver.port}" basePath="${geoserver.basepath}" doc:name="HTTP Request Configuration">
        <http:basic-authentication username="${geoserver.usr}" password="${geoserver.pwd}"/>
    </http:request-config>

<flow name="geoserverFlow" doc:description="{
	url = &quot;/tmp/test&quot;,
	coveragestoreName = &quot;coveragestoreTest&quot;,
	coverageName = &quot;coverageTest&quot;,
	workspaceName = &quot;wsTest&quot;
}

java.util.Map" processingStrategy="synchronous">
        <logger message="Started Geoserver" level="INFO" doc:name="Started Geoserver"/>
        <set-variable variableName="workspaceName" value="#[payload.get(&quot;workspaceName&quot;)]" doc:name="workspaceName"/>
        <set-variable variableName="url" value="#[payload.get(&quot;url&quot;)]" doc:name="url"/>
        <set-variable variableName="coveragestoreName" value="#[payload.get(&quot;coveragestoreName&quot;)]" doc:name="coveragestoreName"/>
        <set-variable variableName="coverageName" value="#[payload.get(&quot;coverageName&quot;)]" doc:name="coverageName"/>
        <set-payload value="{&quot;coverageStore&quot;:{&quot;name&quot;:&quot;#[coveragestoreName]&quot;,&quot;type&quot;:&quot;GeoTIFF&quot;,&quot;enabled&quot;:true,&quot;workspace&quot;:{&quot;name&quot;:&quot;#[workspaceName]&quot;},&quot;url&quot;:&quot;#[url]&quot;,}}" doc:name="Create coveragestore"/>
        <logger message="Create coverageStore request, sending #[payload] to http://${geoserver.host}:${geoserver.port}/${geoserver.basepath}workspaces/#[workspaceName]/coveragestores" level="INFO" doc:name="Create coverageStore request"/>
        <message-properties-transformer doc:name="Add Content-Type Header" >
            <add-message-property key="content-type" value="application/json"/>
        </message-properties-transformer>
        <http:request config-ref="HTTP_Geoserver_Request" path="workspaces/#[workspaceName]/coveragestores" method="POST" doc:name="Create coveragestore">
        </http:request>
        <object-to-string-transformer doc:name="Object to String"/>
        <logger message="CoverageStore creation: (#[message.inboundProperties[&quot;http.status&quot;]]) #[payload]" level="INFO" doc:name="CoverageStore creation END"/>
        <logger message="Coverage creation START" level="INFO" doc:name="Coverage creation START"/>
        <set-payload value="{&quot;coverage&quot;:{&quot;name&quot;:&quot;#[coverageName]&quot;,&quot;title&quot;:&quot;#[coverageName]&quot;,&quot;description&quot;:&quot;Generated from WaterQuality processor&quot;,&quot;abstract&quot;:&quot;Generated from WaterQuality processor&quot;,&quot;enabled&quot;:true,&quot;nativeFormat&quot;:&quot;GeoTIFF&quot;}}" doc:name="Create coverage"/>
        <logger message="Create coverage request, sending #[payload] to http://${geoserver.host}:${geoserver.port}/${geoserver.basepath}workspaces/#[workspaceName]/coveragestores/#[coveragestoreName]/coverages" level="INFO" doc:name="Create coverage request"/>
        <message-properties-transformer doc:name="Add Content-Type Header" >
            <add-message-property key="content-type" value="application/json"/>
        </message-properties-transformer>
        <http:request config-ref="HTTP_Geoserver_Request" path="workspaces/#[workspaceName]/coveragestores/#[coveragestoreName]/coverages" method="POST" doc:name="Create coverage">
            <http:failure-status-code-validator values="401"/>
        </http:request>
        <object-to-string-transformer doc:name="Object to String"/>
        <logger message="Coverage creation: (#[message.inboundProperties[&quot;http.status&quot;]]) #[payload]" level="INFO" doc:name="Coverage creation"/>
    </flow>
    
 </mule>