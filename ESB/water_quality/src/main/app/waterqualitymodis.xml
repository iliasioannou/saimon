<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
    
    <context:property-placeholder location="classpath*:wq${mule.env:#{null}}.properties"
		system-properties-mode="OVERRIDE" order="1" />
	<spring:beans>
		<spring:bean id="wqProps"
			class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<spring:property name="singleton" value="true" />
			<spring:property name="location" value="classpath:wq${mule.env:#{null}}.properties" />
		</spring:bean>
	</spring:beans>
	
    <http:listener-config name="HTTP_Listener_WQ" host="0.0.0.0" port="9190" doc:name="HTTP Listener Configuration"/>
    <http:request-config name="HTTP_Request_Activiti" host="${activiti.host}" port="${activiti.port}" basePath="${activiti.path}" doc:name="HTTP Request Configuration">
    	<http:basic-authentication username="${activiti.usr}" password="${activiti.pwd}" />
    </http:request-config>
    
    <flow name="waterqualitymodisFlow" doc:description="{
    &quot;executionId&quot;: 123456,
    &quot;signalName&quot;: &quot;test_signal&quot;,
    &quot;args&quot;: {
                  &quot;gte&quot;: &quot;Wed Jul 01 00:00:00 CEST 2015&quot;,
                  &quot;lte&quot;: &quot;Fri Jan 01 00:00:00 CET 2016&quot;
              }
}">
		<http:listener config-ref="HTTP_Listener_WQ" path="/wqmodis" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to HashMap"/>
        <set-variable variableName="inputPayload" value="#[payload]" doc:name="save inputPayload"/>
        <logger message="WQModis Request received: #[payload]" level="INFO" doc:name="WQModis Request received"/>
        <set-variable variableName="gte" value="#[new java.text.SimpleDateFormat(&quot;EEE MMM dd kk:mm:ss z yyyy&quot;, java.util.Locale.ENGLISH).parse(payload.get(&quot;args&quot;).get(&quot;gte&quot;))]" doc:name="gte as Date"/>
        <set-variable variableName="lte" value="#[new java.text.SimpleDateFormat(&quot;EEE MMM dd kk:mm:ss z yyyy&quot;, java.util.Locale.ENGLISH).parse(payload.get(&quot;args&quot;).get(&quot;lte&quot;))]" doc:name="lte as Date"/>

        <set-payload doc:name="Set Response" value="OK"/>
        <async doc:name="Async">
            <set-variable variableName="signalName" value="#[inputPayload.get(&quot;signalName&quot;)]" doc:name="signalName"/>
            <set-variable variableName="executionId" value="#[inputPayload.get(&quot;executionId&quot;)]" doc:name="executionId"/>
            <set-variable variableName="lteDate" value="#[lte]" doc:name="lteDate"/>
            <expression-component doc:name="Convert gte/lte format"><![CDATA[import java.text.SimpleDateFormat;

SimpleDateFormat toFormat = new SimpleDateFormat("yyyy-MM-dd");

gte = toFormat.format(gte);
lte = toFormat.format(lte);
]]></expression-component>

            <set-payload value="{&quot;esIndex&quot;:&quot;${elasticsearch.modis.index}&quot;,&quot;esType&quot;:&quot;${elasticsearch.modis.type}&quot;,&quot;esQuery&quot;:{&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;range&quot;:{&quot;date_created&quot;:{&quot;gte&quot;:&quot;#[gte]&quot;,&quot;lte&quot;:&quot;#[lte]&quot;,&quot;time_zone&quot;:&quot;+1:00&quot;}}}],&quot;should&quot;:[{&quot;match&quot;:{&quot;processing_control_input_parameters_suite&quot;:&quot;SST&quot;}},{&quot;match&quot;:{&quot;processing_control_input_parameters_suite&quot;:&quot;OC&quot;}}],&quot;minimum_should_match&quot;:1}}}}" doc:name="Set ES query"/>
            <logger message="ES: #[payload]" level="INFO" doc:name="Logger"/>
            <flow-ref name="elasticSearchFlow" doc:name="elasticSearchFlow"/>
            <set-variable variableName="wqModisMap" value="#[new java.util.HashMap()]" doc:name="wqModisMap"/>
            <expression-component doc:name="Init wqModisMap"><![CDATA[wqModisMap.put("count", payload.size()/2);
wqModisMap.put("runDate", gte);]]></expression-component>
            <set-variable variableName="ocList" value="#[new java.util.ArrayList()]" doc:name="ocList"/>
            <set-variable variableName="sstList" value="#[new java.util.ArrayList()]" doc:name="sstList"/>
            <foreach doc:name="For Each">
                <choice doc:name="OC or SST?">
                    <when expression="#[payload.get(&quot;processing_control_input_parameters_suite&quot;)==&quot;OC&quot;]">
                        <expression-component doc:name="add to ocList"><![CDATA[ocList.add("http://oceandata.sci.gsfc.nasa.gov/cgi/getfile/"+payload.get("product_name"));]]></expression-component>
                    </when>
                    <otherwise>
                        <expression-component doc:name="add to sstList"><![CDATA[sstList.add("http://oceandata.sci.gsfc.nasa.gov/cgi/getfile/"+payload.get("product_name"));]]></expression-component>
                    </otherwise>
                </choice>
            </foreach>
            <expression-component doc:name="Add ocList and sstList to wqModisMap"><![CDATA[wqModisMap.put("OC", ocList);
wqModisMap.put("SST", sstList);]]></expression-component>
            <logger message="wqModisMap: #[wqModisMap]" level="INFO" doc:name="wqModisMap"/>
            <set-payload value="#[wqModisMap]" doc:name="Set wqModisMap"/>
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <scripting:component doc:name="Python">
	            <scripting:script engine="jython"><![CDATA[# client.py
import xmlrpclib

wqProps = muleContext.getRegistry().get("wqProps")

xmlrpcServer = "http://"+wqProps["wqmodis.host"]+":"+wqProps["wqmodis.port"]
moduleName = wqProps["wqmodis.module"]
scriptName = wqProps["wqmodis.process"]

print xmlrpcServer, moduleName, scriptName

proxy = xmlrpclib.ServerProxy(xmlrpcServer)
result = proxy.execute( moduleName, scriptName, payload)]]>
				</scripting:script>
	        </scripting:component>
            <logger message="Py res: #[payload]" level="INFO" doc:name="Py res"/>
            <set-variable variableName="wqModisReturnCode" value="#[json:returnCode]" doc:name="wqModisReturnCode"/>
            <message-filter throwOnUnaccepted="true" doc:name="(wqModisReturnCode != 0) throw Exception!">
                <expression-filter expression="#[wqModisReturnCode.equals(&quot;0&quot;)]"/>
            </message-filter>
            <set-variable variableName="wqModisOutPath" value="#[json:outPath]" doc:name="wqModisOutPath"/>
            <flow-ref name="wqmodisLoaderFlow" doc:name="wqmodisLoaderFlow"/>
			<set-payload doc:name="Set activitiSignalerFlow Request" value="{ &quot;executionId&quot;:&quot;#[executionId]&quot;,&quot;signalName&quot;:&quot;#[signalName]&quot;,&quot;vars&quot;:{&quot;result&quot;:&quot;#[wqModisReturnCode]&quot;} }"/>
            <flow-ref name="activitiSignalerFlow" doc:name="activitiSignalerFlow"/>
        </async>
                <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="#[exception.causedBy(org.python.core.PyException)]" doc:name="Catch Processor Python Exception Strategy">
                <logger message="#[exception.getCauseException()]" level="ERROR" doc:name="Python Error"/>
                <expression-component doc:name="activitiSignaler Flow Request"><![CDATA[java.util.HashMap vars = new java.util.HashMap();
vars.put("result", "-1");
vars.put("error", exception.getMessage()+": "+exception.getCauseException());

payload = new java.util.HashMap();
payload.put("executionId", executionId);
payload.put("signalName", signalName);
payload.put("vars", vars);

]]></expression-component>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <flow-ref name="activitiSignalerFlow" doc:name="Send Error through activitiSignaler Flow"/>
            </catch-exception-strategy>
            <catch-exception-strategy doc:name="Catch Any other Exception Strategy">
                <logger message="!EXCEPTION!#[&quot;\n&quot;] - EXCEPTION TYPE: #[exception.getCauseException().getClass()] #[&quot;\n&quot;] - EXCEPTION MESSAGE: #[exception.getMessage()] #[&quot;\n&quot;] - EXCEPTION CAUSE: #[exception.getCauseException()] #[&quot;\n&quot;] - EXCEPTION ORIGINAL PAYLOAD: #[payload]" level="ERROR" doc:name="Exception log"/>
                <expression-component doc:name="activitiSignaler Flow Request"><![CDATA[java.util.HashMap vars = new java.util.HashMap();
vars.put("result", "-1");
vars.put("error", "Modis Processor exited with error code ("+wqModisReturnCode+")");

payload = new java.util.HashMap();
payload.put("executionId", executionId);
payload.put("signalName", signalName);
payload.put("vars", vars);

]]></expression-component>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <flow-ref name="activitiSignalerFlow" doc:name="Send Error through activitiSignaler Flow"/>
            </catch-exception-strategy>

        </choice-exception-strategy>
    </flow>
    <flow name="wqmodisLoaderFlow" processingStrategy="synchronous">
        <logger message="wqModisOutPath: #[wqModisOutPath]" level="INFO" doc:name="wqModisOutPath"/>
        <set-variable variableName="wqModisOutLocalDir" value="#[wqModisOutPath.replace(app.registry.wqProps[&quot;wq.share.basepath&quot;], &quot;${wq.share.mountpoint}&quot;).replace(&quot;\\&quot;,&quot;/&quot;)]" doc:name="wqModisOutLocalDir"/>
        <scripting:component doc:name="List files in wqModisOutLocalDir">
            <scripting:script engine="jython"><![CDATA[import os
result = os.listdir(wqModisOutLocalDir)]]></scripting:script>
        </scripting:component>
        <foreach doc:name="For Each">
                	<set-variable variableName="fileName" value="#[payload]" doc:name="fileName"/>
            <set-variable variableName="noextFileName" value="#[fileName.substring( 0, fileName.lastIndexOf(&quot;.&quot;) )]" doc:name="noextFileName"/>
            <set-variable variableName="coverageName" value="#[noextFileName.split(&quot;_&quot;)[1].toUpperCase()]" doc:name="coverageName"/>
            <set-variable variableName="workspaceName" value="${geoserver.workspace}" doc:name="workspaceName"/>
            <logger message="wqmodisCreateDownload for #[fileName]" level="INFO" doc:name="wqmodisCreateDownload "/>
            <set-variable variableName="wqModisOutLocalFullPath" value="#[wqModisOutLocalDir+fileName ]" doc:name="wqModisOutLocalFullPath"/>
            <component class="it.planetek.saimon.zip.DownloadZipCreator" doc:name="DownloadZipCreator"/>
            <set-variable variableName="Prod_Download" value="#[payload]" doc:name="Prod_Download"/>
            <logger message="Download Url: #[Prod_Download]" level="INFO" doc:name="Download Url"/>
            <choice doc:name="Thematic?">
                <when expression="#[noextFileName.split(&quot;_&quot;)[2] == &quot;Thematic&quot;]">
                    <logger message="Load file in Geoserver: #[fileName]" level="INFO" doc:name="Load file in Geoserver"/>
                    <expression-component doc:name="Set payload geoserverReq HashMap"><![CDATA[payload = new java.util.HashMap();
payload.put("coveragestoreName", coverageName );
payload.put("url", "file://"+wqModisOutLocalDir+fileName );
payload.put("workspaceName", workspaceName);
return payload;
]]></expression-component>
                    <logger message="Call Geoserver flow with #[payload]" level="INFO" doc:name="Call Geoserver flow"/>
                    <flow-ref name="geoserverImageMosaicFlow" doc:name="geoserverImageMosaicFlow"/>
                </when>
                <otherwise>
                    <logger message="#[fileName] is NOT Thematic, won't load in Geoserver" level="INFO" doc:name="No Thematic, No Geoserver"/>
                </otherwise>
            </choice>

            
            
             <logger message="Prepare metadata for Geonetwork for #[fileName]" level="INFO" doc:name="Prepare metadata for Geonetwork"/>
            <set-variable variableName="Prod_Type" value="#[new org.mule.module.json.JsonData('${wqmodis.prodtype}').get(noextFileName.split(&quot;_&quot;)[2]).toString()]" doc:name="Prod_Type"/>
            <set-variable variableName="Par_Type" value="#[new org.mule.module.json.JsonData('${wqmodis.partype}').get(noextFileName.split(&quot;_&quot;)[1]).toString()]" doc:name="Par_Type"/>
            <set-variable variableName="Res" value="#[Prod_Type.contains(&quot;Improved&quot;) ? &quot;&amp;lt;100m&quot; : &quot;1km&quot;]" doc:name="Res"/>
            <set-variable variableName="Res_Denominator" value="#[Prod_Type.contains(&quot;Improved&quot;) ? 1000000 : 10000000]" doc:name="Res_Denominator"/>

            <set-variable variableName="Processing_Type" value="modis" doc:name="Processing_Type"/>
            <set-variable variableName="Publication_Date" value="#[ new java.text.SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;).format(new java.util.Date())]" doc:name="Publication_Date"/>
            <set-variable variableName="Creation_Date" value="#[Publication_Date]" doc:name="Creation_Date"/>
            <set-variable variableName="Temporal_Extent" value="#[new org.mule.el.datetime.DateTime(noextFileName.split(&quot;_&quot;)[0], &quot;'A'yyyyMMdd&quot;).format(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;) ]" doc:name="Temporal_Extent"/>
            <logger message="Temp_Extent: #[Temporal_Extent] from #[noextFileName.split(&quot;_&quot;)[0]]" level="INFO" doc:name="Temp_Extent"/>
            <set-variable variableName="geoserverPublic" value="${geoserver.public}" doc:name="geoserverPublic"/>
            
            
            <http:request config-ref="HTTP_Geoserver_Request" path="workspaces/#[workspaceName]/coveragestores/#[coverageName]/coverages/#[coverageName].json" method="GET" doc:name="Req Bbox from Geoserver "/>
            <object-to-string-transformer doc:name="Object to String"/>
	        <json:object-to-json-transformer doc:name="Object to JSON"/>
	
	        <set-variable variableName="Extent_West" value="#[json:coverage/latLonBoundingBox/minx]" doc:name="Extent_West"/>
	        <set-variable variableName="Extent_East" value="#[json:coverage/latLonBoundingBox/maxx]" doc:name="Extent_East"/>
	        <set-variable variableName="Extent_South" value="#[json:coverage/latLonBoundingBox/miny]" doc:name="Extent_South"/>
	        <set-variable variableName="Extent_North" value="#[json:coverage/latLonBoundingBox/maxy]" doc:name="Extent_North"/>
	
	        <parse-template location="Dataset_Template_ISO19139.xml" doc:name="Parse Template ISO19139"/>
	        <object-to-string-transformer doc:name="Object to String"/>
	        <expression-component doc:name="Set payload geonetworkReq HashMap"><![CDATA[String metadataXml = payload;
payload = new java.util.HashMap();
payload.put("type", Processing_Type);
payload.put("metadataXml", metadataXml);
return payload;]]></expression-component>
	        <logger message="Call geonetwork flow #[payload]" level="INFO" doc:name="Call geonetwork flow"/>
	        <flow-ref name="geonetworkFlow" doc:name="geonetworkFlow"/>

	            
        </foreach>
    </flow>

</mule>
